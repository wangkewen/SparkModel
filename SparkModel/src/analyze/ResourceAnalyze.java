/*
 * Extract resources consumption information from resources file generated by Dstat
 */

package analyze;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import profile.ResourcesInfo;
import profile.ResourcesInfo.Res;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.BufferedReader;

public class ResourceAnalyze implements Analyze<ResourcesInfo>{
private String resfilename=null;
private ResourcesInfo resinfo =null;
public ResourceAnalyze(String resfilename){
	this.resfilename=resfilename;
}
public ResourcesInfo generate(){
	load();
	return this.resinfo;
}
public void load(){
	int paranum = 11;
	resinfo = new ResourcesInfo();
	resinfo.setFilename(resfilename);
	File resfile = new File(resfilename);
	BufferedReader br=null;
	String line=null;
	DateFormat df = new SimpleDateFormat("dd MMM yyyy HH:mm:ss zzz");
	try{
	br = new BufferedReader(new FileReader(resfile));
	while((line=br.readLine())!=null){
	if(line.startsWith("\"Host:\"") && line.contains(","))
		resinfo.setHost(line.split(",")[1].replaceAll("\"", ""));
	if(line.startsWith("\"Cmdline:\"") && line.contains(","))
		resinfo.setCmdline(line.split(",")[1].replaceAll("\"", ""));
	if(line.contains("\"Date:\"") && line.contains(",")){
		String strdate = line.split(",")[line.split(",").length-1].replaceAll("\"", "");
		try{
		resinfo.setBegintime(df.parse(strdate));
		}catch(ParseException e){
			e.printStackTrace();
		}
	}
	if(line.equals("")) break;
	}
	br.readLine(); //pass the title
	int[] indexlist = new int[paranum];
	for(int i=0;i<paranum;i++) indexlist[i]=i;
	line=br.readLine();
	String[] typename;
	String typestr;
	if(line.contains("\"")){
		typename=line.split(",");
		for(int j=0;j<typename.length;j++){
			typestr=typename[j].replaceAll("\"","");
			switch(typestr){
			case "usr": indexlist[0]=j; break;
			case "sys": indexlist[1]=j; break;
			case "idl": indexlist[2]=j; break;
			case "wai": indexlist[3]=j; break;
			case "read": indexlist[4]=j; break;
			case "writ": indexlist[5]=j; break;
			case "recv": indexlist[6]=j; break;
			case "send": indexlist[7]=j; break;
			case "int": indexlist[8]=j; break;
			case "csw": indexlist[9]=j; break;
			case "time": indexlist[10]=j;break;
			default: break;
			}
		}
	}
	Long reftime=0l;
	while((line=br.readLine())!=null){
		if(!line.contains("\"") && line.contains(",")){
			String[] paravalues = line.split(",");
			if(paravalues.length >= paranum){
				Res res = resinfo.new Res();
				res.setCpu_usr(Double.parseDouble(paravalues[indexlist[0]]));
				res.setCpu_sys(Double.parseDouble(paravalues[indexlist[1]]));
				res.setCpu_idl(Double.parseDouble(paravalues[indexlist[2]]));
				res.setCpu_wai(Double.parseDouble(paravalues[indexlist[3]]));
				res.setDisk_read(Double.parseDouble(paravalues[indexlist[4]]));
				res.setDisk_writ(Double.parseDouble(paravalues[indexlist[5]]));
				res.setNet_recv(Double.parseDouble(paravalues[indexlist[6]]));
				res.setNet_send(Double.parseDouble(paravalues[indexlist[7]]));
				res.setSys_int(Double.parseDouble(paravalues[indexlist[8]]));
				res.setSys_csw(Double.parseDouble(paravalues[indexlist[9]]));
				try{
				df = new SimpleDateFormat("dd-MM HH:mm:ss");
				if(reftime==0){
				res.setTime(resinfo.getBegintime());
				reftime = df.parse(paravalues[indexlist[10]]).getTime();
				}else{
					res.setTime(new Date(resinfo.getBegintime().getTime()
							+df.parse(paravalues[indexlist[10]]).getTime()-reftime));
				}
				}catch(ParseException e){
					e.printStackTrace();
				}
				resinfo.getResList().add(res);
			}
		}
	}
	br.close();
	}catch(IOException e){
		e.printStackTrace();
	}
}
public void printresinfo(){
	if(resinfo == null) System.out.println("ResInfo is NULl...");
	else {
		System.out.println("---ResourcesInfo---");
		System.out.println("Host:"+resinfo.getHost());
		System.out.println("Begintime:"+resinfo.getBegintime());
		for(int i=0;i<resinfo.getResList().size();i++){
			Res restmp = resinfo.getResList().get(i);
			System.out.println("___CPU___");
			System.out.println("usr: "+restmp.getCpu_usr() +" sys: "+restmp.getCpu_sys()
					+" idl: "+restmp.getCpu_idl() +" wai: "+restmp.getCpu_wai());
			System.out.println("___Disk___");
			System.out.println("read: "+restmp.getDisk_read()+" writ: "+restmp.getDisk_writ());
			System.out.println("___Net___");
			System.out.println("recv: "+restmp.getNet_recv()+" send: "+restmp.getNet_send());
			System.out.println("___System___");
			System.out.println("int: "+restmp.getSys_int()+" csw: "+restmp.getSys_csw());
			System.out.println("time: "+restmp.getTime());	
		}
	}
}
}
